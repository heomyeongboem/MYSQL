#---서브 쿼리: sql 문안에 '부품'처럼 들어가는 select 문 
#--having 안에 서브 쿼리 
--> 리뷰 테이블에 있는 총 평점의 평균값 보다 작은 상품 찾기

select i.id ,i.name, avg(star) as avg_star 
from item as i left outer join review as r on r.item_id = i.id
group by i.id , i.name
having avg_star < (select avg(star) from review)
order by avg_star desc;

#--select 문 안에 서브쿼리
select 
id,name,price, (select max(price) from item) as max_price 
from item;

#--where 절 안에 서브쿼리
--> 평균 가격 보다 큰 상품 찾기 
select id,name,price,(select avg(price) from item) as avg_star
from item
where price > (select avg(price) from item);

-->최저가 상품의 이름, id,가격 찾기
select id,name,price
from item
where price  = (select min(price) from item);

-->평점 갯수가 3개 이상인 상품 정보 출력
select *
from item
where id in 
(
select item_id from review group by item_id having count(*) > 3 
);

#--any(some) 은 return 한 서브쿼리의 row들 중 적어도 하나만 만족하면 됨
-->age> any(서브쿼리) 는 서브쿼리의 return 값들 중 적어도 최솟값보다 큰거를 찾는다
select * from member 
where age > any(select age from member where height > 20);

-->all 은 return 한 서브쿼리의 row들 모두를 만족
select * from member
where view_count > all(select view_count from codeit_theater
where category ='ACTION') and category!= 'ACTION';

-->가장 많은 회원들이 살고 있는 지역의 회원들만 조회
select * from member 
where substring(address,1,2) = 
(
select substring(address,1,2) from member group by substring(address,1,2)
order by count(*) desc
limit 1
);

저는 코팡에서 2020년을 기준으로 생각했을 때, 꽤 오래 전에 등록되었지만 
아직까지도 리뷰가 달리고 있는 스테디 셀러 상품들의 리뷰들을 살펴보려고 하는데요. 
review 테이블에서
'2018년 12월 31일' 이전에 코팡 사이트에 등록된 상품들에 관한 리뷰들만 추려보겠습니다.
그리고 이때 review 테이블의 모든 컬럼들을 조회하세요.
*조인 말고 서브쿼리를 사용해서 문제를 해결해보세요.
select * from review 
where item_id in (
select id from item where registration_date < '2018-12-31'
)

#--from 절에 있는 서브 쿼리
# derived table 이라 하며 서브 쿼리로 생성된 테이블이다. -> 컬럼 2개 이상

select avg(review_count),max(review_count),min(review_count)
from
(select substring(address,1,2) as region,
    count(*) as review_count 
    from review as r left outer join member as m 
    on r.mem_id = m.id 
    group by substring(address,1,2)
    having region is not null
    and region != '안드')as review_count_summary;


#---서브 쿼리 ---
단일 값을 리턴하는 서브쿼리 -> where = , > 
하나의 column에 여러 row들이 있는 형태의 결과를 리턴하는 서브 쿼리
:where in,any,some,all
하나의 테이블 형태의 결과를 리턴하는 서브 쿼리: 원래 테이블처럼 사용 + alias 붙여줘야됨 

#---비상관 서브쿼리 :서브 쿼리가 그것을 둘러싼 outer query와 별개로 독립적으로 실행
상관 서브 쿼리: 서브쿼리랑 outer query가 상관관계가 있음
-->item 테이블 중에서 id 컬럼 값이 review 테이블의 item_id 컬럼에 존재하는 row 들만 조회해라

select * from item
where exists (select * from review where review.item_id = item.id)

#같은 테이블인데 m1,m2로 나눠서 같다고 표시하는거는 같은 컬럼을 찾는것 
->같은 년도 에 태어난 애들 중 제일 작은 키를 기존의 select 문에 추가하겠다.
select *,
(select min(height)
from member as m2 where birthday is not null and height is not null and
year(m1.birthday) = year(m2.birthday)) as min_height_in_the_year
from member as m1 
order by min_height_in_the_year asc;

#실습과제
이때 리뷰가 있는 상품들의 가격 중에서
최대 가격
리뷰의 평균 별점
리뷰를 남긴 고유한 회원 이메일의 수
를 구하려고 하는데요.
일단은
이 세 테이블을 모두 이너 조인(inner join)하고, 거기서 price, star, email 컬럼만 조회하세요.
그 SELECT 문을 derived table로 활용해보세요.
그리고 derived table에는 copang_report(코팡 보고서)라는 alias를 붙여주세요.
조회하는 컬럼은 다음과 같은 3가지 컬럼일 텐데요. 각 컬럼에 아래와 같은 alias를 붙여주세요.
MAX(copang_report.price) → max_price
AVG(copang_report.star) → avg_star
COUNT(DISTINCT(copang_report.email)) → distinct_email_count

select 
max(price)as 'max_price' , 
avg(star) as 'avg_star', 
count(*) as 'distinct_email_count' 
from(select price, star, email from item as i inner join review as r on r.item_id = i.id 
inner join member as m on r.mem_id = m.id) as copang_report ; 

---서브쿼리 VS 조인---
1)서브쿼리: item테이블에 있는 id에 대해서 stock의 inventory_count를 가져옴--- 
select id, name,(select inventory_count from stock where stock.item_id = item.id) 
from item;

2)조인: item테이블에 있는 id에 대해서 stock의 inventory_count를 가져옴--- 
select i.id, i.name, s.inventory_count
from item as i left outer join stock as s 
on s.item_id = i.id;

3)서브쿼리안에 as 를 이용한 바깥에 case문 
select email,bmi,
(case 
    when weight is null or height is null then '비만 여부 알 수 없음'
    when BMI >= 25 then '과제충 또는 비만'
    when BMI >= 18.5 and BMI < 25 then '정상'
    else  '저체중'
end)as obesity_check 
from
(select *,weight/((height/100) * (height/100)) as bmi from member)as subquery_for_BMI
order by obesity_check asc;

---뷰 : 조인, 서브쿼리 등의 작업을 해서 만든 '결과 테이블' 이 가상으로 저장된 형태---
#create view 테이블명 as 서브쿼리;
아이템 id와 name으로 그룹 지었을때 아이템의 평균평점의 최고값이면서
평점의 갯수가 제일 많은 아이템 찾기 

1)뷰 테이블 만들기 
create view three_tables_joined as 
select i.id ,i.name, avg(star) as avg_star, count(*) as count_star 
from item as i left outer join review as r on r.item_id = i.id 
left outer join member as m on r.mem_id = m.id 
where m.gender = 'f'
group by i.id, i.name
having count(*) >= 2
order by avg(star) desc , count(*) desc;

2)뷰 테이블 사용하기 
select * from three_tables_joined
where avg_star = (
select max(avg_star) from three_tables_joined
)
and count_star = (
select max(count_star) from three_tables_joined
)

3) 장점:
사용자에게 높은 편의성을 제공한다. -> 한 쿼리창안에서 여러 서브 쿼리를 작성하지 않아도 되므로
+ 똑같은 문을 여러번 작성하지 않아도 되므로
각자에게 적합한 구조로 데이터들을 준비해둘 수 있다.

보안
ex)부서가 secret인 애들은 보여주지 않는 뷰를 만든다.
create view emp_view2 as 
select id,
name,
age,
department 
from employee
where department != 'secret';

---회사 내의 데이터베이스 파악---
1)show databases :존재하는 데이터 베이스 파악
2)show full tables in 데이터베이스 :데이터베이스안에 뷰와 테이블 파악 
3)describe 테이블 :테이블의 컬럼 구조 파악 
4)foreign key 파악:
select 
i.table_schema, i.table_name,i.constraint_type,i.constraint_name,
k.referenced_table_name,k.referenced_column_name

from information_schema.table_constraints i
left join information_schema.key_column_usage k on i.constraint_name = k.constraint_name
where i.constraint_type = 'FOREIGN KEY';









