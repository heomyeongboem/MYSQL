한줄 요약:
create table 데이터베이스.테이블;
insert into 테이블(컬럼) values(컬럼값);
update 테이블  set 컬럼 = '수정할 값' where 조건; 
delete from 컬럼 where 조건;

#---create database :데이터 베이스 생성
create database course_rating;
-->기존에 course_rating 이라는 데이터베이스가 있다면 에러가 아닌 경고를 띄어라 
create database if not exists course_rating; 

이후---사용할 데이터 베이스 지정 
=> use course_rating;

#---데이터 타입--- 
---Numeric types(숫자형 타입)---
---정수형---
1) TINYINT 
TINYINT SIGNED : -128 ~ 127 
TINYINT UNSIGNED : 0 ~ 255

2) SMALLINT : : TINYINT 보다 좀더 큰 범위의 정수를 나타낼 때 쓰는 데이터 타입입니다.
SMALLINT SIGNED : -32768 ~ 32767 
SMALLINT UNSIGNED : 0 ~ 65535

3) MEDIUMINT : 더 넓은 범위를 나타내는 데이터 타입니다. 
MEDIUMINT SIGNED : -8388608 ~ 8388607 (백만 단위)
MEDIUMINT UNSIGNED : 0 ~ 16777215

4) INT : 더 넓은 범위를 나타내는 데이터 타입입니다.
INT SIGNED : -2147483648 ~ 2147483647 (10억)
INT UNSIGNED : 0 ~ 4294967295

---실수형---
1) DECIMAL(M,D) : 정밀하게 씀.여기서 M은 최대로 쓸 수 있는 전체 숫자의 자리수이고, 
D는 최대로 쓸 수 있는 소수점 뒤에 있는 자리의 수

DECIMAL (5, 2)라면 -999.99 부터 999.99
M은 최대 65, D는 30까지의 값을 가질 수 있습니다. 

2) FLOAT :아주 큰 실수들을 나타낼 수 있는 데이터 타입입니다
-3.402823466E+38 ~ -1.175494351E-38,
0, 
1.175494351E-38 ~ 3.402823466E+38

3) DOUBLE :FLOAT에 비해 더 넓은 범위의 수를 나타낼 수 있을 뿐만 아니라, 그 정밀도 또한 더 높은 타입입니다.
(소수점 뒤에 최대로 허용가능한 자리수가 더 많음)
-1.7976931348623157E+308 ~ -2.2250738585072014E-308, 
0, 
2.2250738585072014E-308 ~ 1.7976931348623157E+308

2. 날짜 및 시간 타입(Date and Time Types)
(1) DATE 
: 날짜를 저장하는 데이터 타입입니다. 
날짜는 ’2020-03-26’ 이런 형식의 연, 월, 일 순으로 값을 나타냅니다. 

(2) DATETIME
: 날짜와 시간을 저장하는 데이터 타입입니다. 
’2020-03-26 09:30:27’ 이런 식으로 연, 월, 일, 시, 분, 초를 나타냅니다. 

(3) TIMESTAMP 
: 날짜와 시간을 저장하는 데이터 타입입니다.
타임 존 정보저장 즉,  MySQL 서버의 시간대 설정 시간을 바꾸면 바뀜 ,반면,DATETIME은 안바뀜
 ’2020-03-26 09:30:27’ 이런 식으로 연, 월, 일, 시, 분, 초를 나타냅니다. 
TIMESTAMP 타입은 타임 존(time_zone) 정보도 함께 저장한다는 점이 다릅니다.
전세계에 여러 시간대(타임존, time-zone)가 존재한다는 사실은 알고 계시죠? 
각각의 시간대는 UTC를 기준으로 나타낼 수 있는데요. UTC(Coordinated Universal Time)는 
국제 사회에서 통용되는 표준 시간 체계로 '국제 표준시'라고도 합니다. 
UTC는 영국 런던을 기준으로 하는데요. 우리나라는 런던을 기준으로 시간이 9시간 더 빠르기 때문에, 
우리나라의 시간을 표현할 때는 UTC+9라고 표현합니다.
그러니까 위에서 제가 저장한 날짜 시간 값은 이미 UTC+9에 해당하는 값인 거죠.
set time_zone = '-11:00' 
를 실행하면 UTC+9 가 UTC-11로 바뀝니다. 이렇게 하면 DATETIME 컬럼의 값은 그대로인데, 
TIMESTAMP 컬럼의 값은 원래 시간보다 20시간 이전인 값으로 바뀌어 있는 것을 알 수 있습니다.

(4) TIME 
: 시간을 나타내는 데이터 타입입니다. ’09:27:31’ 형식으로 ‘시:분:초’를 나타냅니다. 

3. 문자열 타입(String type) 
(1) CHAR :정적
: 문자열을 나타내는 기본 타입으로 Character의 줄임말입니다
CHAR 타입의 괄호 안에는 0부터 255까지의 숫자를 적을 수 있습니다. 


(2) VARCHAR :가변 
CHAR(10)은 어떤 길이의 문자열이 저장되더라도 항상 그 값이 10만큼의 저장 용량을 차지합니다. 
하지만 VARCHAR(10)의 경우 만약 값이 ‘Hello’ 이런 5자라면 저장 용량도 5만큼 차지합니다. 
저장 용량이 설정된 최대 길이에 맞게 고정되는 게 아니라 실제 저장된 값에 맞게 최적화되는 거죠.
대신 VARCHAR 타입으로 값이 저장될 때는 해당 값의 사이즈를 나타내는 부분(1byte 또는 2byte)이 
저장 용량에 추가됩니다.

(3) TEXT
정말 길이가 긴 문자열을 저장하려면 TEXT 계열의 타입을 써야하는구나 정도만 기억해주세요.

#---테이블 생성--- 
CREATE TABLE '데이터베이스'.'테이블'
(컬럼명 데이터타입 데이터속성,
컬럼명 데이터타입 데이터속성,
컬럼명 데이터타입 데이터속성,
PRIMARY KEY('컬럼명'))

#---ROW 추가---
1)가장기본적인 형태 
insert into 테이블(컬럼명,...)value(값들);
INSERT INTO student (id,name,student_number,major,email,phone,addmission_date)
VALUES(1,'성태후',20142947,'컴퓨터공학과','taehos@naver.com','010-7373-1234','2014-03-12');

2)모든 컬럼에 값을 넣을때는 컬럼명을 적지 않아도 된다.
insert into student 
values(1,'성태후',20142947,'컴퓨터공학과','taehos@naver.com','010-7373-1234','2014-03-12');

3)컬럼명을 적은 부분만 값이 할당된다. 
하지만 primary key는 값을 적지 않아도 값이 할당된다.(auto-increment에 의해)
insert into student(name,student,major,admission_date)
values('이현승','20111025','법학과','2011-03-02');

4)실습과제
한 동물원에서 동물들을 관리하기 위해 animal_info라는 테이블을 만들려고 합니다. 
animal_info 테이블에는 다음과 같은 컬럼들을 두려고 하는데요.
id : Primary Key로 사용할 컬럼, 데이터 타입 : INT
type : 동물 종류(사자, 코끼리 등), 데이터 타입 : VARCHAR, 최대 길이 : 30자
name : 동물 이름(리오, 조이 등), 데이터 타입 : VARCHAR, 최대 길이 : 10자
age : 나이, 데이터 타입 : TINYINT
sex : 성별, 데이터 타입 : CHAR, 최대 길이 : 1자
weight : 몸무게, 데이터 타입 : DOUBLE
feature : 특징 묘사, 데이터 타입 : VARCHAR, 최대 길이 : 500자
entry_date : 동물원에 들어온 날짜, 데이터 타입 : DATE 
여러분이 CREATE TABLE 문을 사용해서 이 animal_info 테이블을 직접 만들어주세요.
이 때 id 컬럼에는 AUTO_INCREMENT 속성을 주세요.
그리고 feature 컬럼을 제외한 모든 컬럼에는 NOT NULL 속성을 주고,
feature 컬럼에만 NULL이 존재해도 된다는 의미로 NULL 속성을 주세요. 

create table animal_info(
id int not null AUTO_INCREMENT primary key,
type varchar(30) not null,
name varchar(10), 
age tinyint not null,
sex char(1) not null,
weight double not null,
feature varchar(500) null,
entry_date date not null,
)

5)실습과제
food_menu 테이블
id	menu	price	ingredient
INSERT INTO 문을 사용해서 아래 메뉴 정보들을 테이블에 채워보세요.
(라볶이 / 5000 / 라면, 떡, 양파..)
(치즈김밥 / 3000 / 치즈, 김, 단무지..)
(돈까스 / 8000 / 국내산 돼지고기, 양배추..)
(오므라이스 / 7000 / 계란, 당근..)

insert into food_menu (menu,price,ingredient)
values('라볶이',5000 ,'라면', '떡', '양파..');
insert into food_menu (menu,price,ingredient)
values('치즈김밥' ,3000 ,'치즈', '김', '단무지..');
insert into food_menu (menu,price,ingredient)
values('돈까스' , 8000 , '국내산 돼지고기', '양배추..');
insert into food_menu (menu,price,ingredient)
values('오므라이스' , 7000 ,'계란', '당근..');

#---row갱신하기---
1)row 업데이트하기 
update ~ set where 
update 테이블 set 컬럼 = '수정될 값' where 조건;
update student set major = '멀티미디어학과' , name = '차소원' where id = 2;

2)컬럼의 기존 값을 기준으로 갱신하기 
모든 학생들의 score + 3 
update final_exam_result set score = score + 3;

3)row 삭제하기
delete from ~ where 
delete from student where id = 4;

4)-1 물리삭제 : 3)처럼 row 한줄을 삭제하는것
delete from order where id = 2;

4)-2 논리삭제 : 삭제 여부를 나타내는 별도의 컬럼을 두고, 
그 컬럼에 삭제되었음을 나타내는 값을 넣는 것
update order set is_cancelled = 'Y' where id = 2;

5)실습과제
item이라는 테이블을 사용하고 있다고 합시다. 
(1) ‘남성정장 상하의 세트' 중고 물품이 너무 팔리지 않아서인지 판매자가 삭제해버렸습니다. 
이 row의 is_deleted 컬럼의 값을 Y로 갱신해주세요. 
(2) is_deleted 컬럼의 값이 Y이면서, 그 게시글 업로드일이 2020년 7월 5일 기준으로 365일보다
더 오래된 상품들의 row를 물리 삭제하세요. 

update item set is_deleted = 'Y' where name = ‘남성정장 상하의 세트';
delete from item where is_deleted = 'Y' and date_diff("2020-7-5" , upload_date) > 365;







